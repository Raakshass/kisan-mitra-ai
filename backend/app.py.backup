from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import base64
from datetime import datetime
import json
import cv2
import numpy as np
from PIL import Image
import io
import google.generativeai as genai
import random

app = Flask(__name__)

# Enhanced CORS configuration
CORS(app, resources={
    r"/api/*": {
        "origins": ["*"],  # Allow all origins for testing
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
})

# Replace with your actual Gemini API key
GEMINI_API_KEY = "AIzaSyC556reoC4SxxVSmpwF6w3gHzasCPuJnS4"  # Replace this

# Configure Gemini
try:
    genai.configure(api_key=GEMINI_API_KEY)
    GEMINI_READY = True
    print("тЬЕ Gemini API configured successfully!")
except Exception as e:
    GEMINI_READY = False
    print(f"тЪая╕П Gemini API error: {e}")

app.config['UPLOAD_FOLDER'] = 'uploads'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

@app.route('/api/health', methods=['GET'])
def health():
    return jsonify({
        "status": "ЁЯМ▒ Kisan Mitra REAL AI is running!",
        "time": datetime.now().isoformat(),
        "ai_backend": "Google Gemini AI" if GEMINI_READY else "Enhanced Local AI",
        "version": "8.1 - Debug Enhanced"
    })

@app.route('/api/test', methods=['POST'])
def test_api():
    """Debug endpoint to test frontend-backend communication"""
    try:
        data = request.get_json()
        print(f"ЁЯзк Test route received: {data}")
        
        return jsonify({
            "success": True,
            "received_data": data,
            "test_response": "тЬЕ Frontend-Backend communication working!",
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        print(f"ЁЯзк Test route error: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/api/chat', methods=['POST'])
def chat():
    try:
        print("ЁЯУи Chat endpoint hit!")
        
        data = request.get_json()
        print(f"ЁЯУж Received data: {data}")
        
        user_message = data.get('message', '').strip()
        print(f"ЁЯТм User message: '{user_message}'")
        
        if not user_message:
            response_data = {
                "response": "рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВред Please ask your question.",
                "timestamp": datetime.now().isoformat(),
                "debug": "Empty message received"
            }
            print(f"ЁЯУд Sending response: {response_data}")
            return jsonify(response_data)
        
        # Get AI response
        ai_response = get_gemini_response(user_message)
        print(f"ЁЯдЦ AI Response: {ai_response[:100]}...")
        
        response_data = {
            "response": ai_response,
            "timestamp": datetime.now().isoformat(),
            "powered_by": "Google Gemini AI" if GEMINI_READY else "Enhanced Local AI",
            "language": "Hindi + English",
            "debug": "Response generated successfully"
        }
        
        print(f"ЁЯУд Sending final response: {response_data}")
        return jsonify(response_data)
        
    except Exception as e:
        print(f"тЭМ Chat error: {e}")
        error_response = {
            "response": "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
            "error": str(e),
            "debug": "Exception occurred in chat endpoint"
        }
        return jsonify(error_response), 200

def get_gemini_response(user_message):
    """Get response from Google Gemini AI"""
    
    if not GEMINI_READY or GEMINI_API_KEY == "your-actual-gemini-api-key-here":
        print("ЁЯФД Gemini not available, using enhanced local AI")
        return get_enhanced_local_response(user_message)
    
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        agricultural_prompt = f"""You are an expert agricultural advisor specializing in Indian farming practices. A farmer has asked you a question.

Farmer's Question: {user_message}

Please provide a comprehensive response that includes:
1. Direct answer in both Hindi and English
2. Practical, actionable advice
3. Specific recommendations with quantities/timings when applicable
4. Any preventive measures
5. Emergency contact information if needed

Format your response clearly with:
- Main heading with appropriate emoji
- Key points with Hindi and English
- Practical tips with specific measurements
- Help contact: Kisan Call Center 1800-180-1551

Keep the tone friendly, expert, and immediately helpful for Indian farmers."""

        print("ЁЯФД Calling Gemini API...")
        
        response = model.generate_content(agricultural_prompt)
        
        if response and response.text:
            print("тЬЕ Gemini API responded successfully")
            return format_gemini_response(response.text, user_message)
        else:
            print("тЭМ Gemini returned empty response")
            return get_enhanced_local_response(user_message)
            
    except Exception as e:
        print(f"тЭМ Gemini API error: {e}")
        return get_enhanced_local_response(user_message)

def format_gemini_response(gemini_text, user_question):
    """Format Gemini response for better presentation"""
    formatted_response = gemini_text.strip()
    
    # Add footer with contact info if not present
    if "1800-180-1551" not in formatted_response:
        formatted_response += f"\n\nЁЯУЮ **рддрддреНрдХрд╛рд▓ рд╕рд╣рд╛рдпрддрд╛:** рдХрд┐рд╕рд╛рди рдХреЙрд▓ рд╕реЗрдВрдЯрд░ 1800-180-1551"
    
    return formatted_response

def get_enhanced_local_response(user_message):
    """Enhanced local AI response when Gemini fails"""
    
    message_lower = user_message.lower()
    
    if any(word in message_lower for word in ['kharab', 'рдЦрд░рд╛рдм', 'problem', 'рд╕рдорд╕реНрдпрд╛']):
        return """ЁЯжа **рдлрд╕рд▓ рдХреА рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╕рдорд╛рдзрд╛рди / Crop Problem Solution:**

**ЁЯФН рддреБрд░рдВрдд рдХрд░реЗрдВ:**
- рд░реЛрдЧрдЧреНрд░рд╕реНрдд рдкрддреНрддрд┐рдпреЛрдВ рдХреЛ рд╣рдЯрд╛рдХрд░ рдЬрд▓рд╛рдПрдВ
- рдиреАрдо рддреЗрд▓ 5ml + 1 рд▓реАрдЯрд░ рдкрд╛рдиреА рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ
- рдЬрд▓ рдирд┐рдХрд╛рд╕реА рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ

**ЁЯТК рдЙрдкрдЪрд╛рд░:**
- рдХреЙрдкрд░ рд╕рд▓реНрдлреЗрдЯ 3g/L рдкрд╛рдиреА рдореЗрдВ рдЫрд┐рдбрд╝рдХрд╛рд╡
- рдкреНрд░рднрд╛рд╡рд┐рдд рднрд╛рдЧреЛрдВ рдХреЛ рддреБрд░рдВрдд рд╣рдЯрд╛рдПрдВ

ЁЯУЮ **рддрддреНрдХрд╛рд▓ рд╕рд╣рд╛рдпрддрд╛:** рдХрд┐рд╕рд╛рди рдХреЙрд▓ рд╕реЗрдВрдЯрд░ 1800-180-1551"""

    elif any(word in message_lower for word in ['gehu', 'рдЧреЗрд╣реВрдВ', 'wheat']):
        return """ЁЯМ╛ **рдЧреЗрд╣реВрдВ рдХреА рдЦреЗрддреА / Wheat Farming:**

**ЁЯМ▒ рдмреБрдЖрдИ:**
- рд╕рдордп: рдирд╡рдВрдмрд░-рджрд┐рд╕рдВрдмрд░
- рдмреАрдЬ рджрд░: 100-125 kg/hectare
- рдЧрд╣рд░рд╛рдИ: 4-5 рд╕реЗрдореА

**ЁЯзк рдЦрд╛рдж:**
- NPK: 120:60:40 kg/hectare
- рдпреВрд░рд┐рдпрд╛ 3 рдмрд╛рд░ рдореЗрдВ рджреЗрдВ

**ЁЯТз рд╕рд┐рдВрдЪрд╛рдИ:**
- 4-6 рдмрд╛рд░ рдЖрд╡рд╢реНрдпрдХ
- рдорд╣рддреНрд╡рдкреВрд░реНрдг: CRI, Tillering, Flowering

ЁЯУЮ **рд╕рд╣рд╛рдпрддрд╛:** рдХрд┐рд╕рд╛рди рдХреЙрд▓ рд╕реЗрдВрдЯрд░ 1800-180-1551"""

    else:
        return """ЁЯМ▒ **рд╕рд╛рдорд╛рдиреНрдп рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ / General Agricultural Advice:**

**рдореБрдЦреНрдп рд╕реБрдЭрд╛рд╡:**
- рдирд┐рдпрдорд┐рдд рдорд┐рдЯреНрдЯреА рдкрд░реАрдХреНрд╖рдг рдХрд░рд╛рдПрдВ
- рд╕рдВрддреБрд▓рд┐рдд рдЦрд╛рдж рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ
- рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдВ
- IPM рддрдХрдиреАрдХ рдЕрдкрдирд╛рдПрдВ

**рдЖрдзреБрдирд┐рдХ рддрдХрдиреАрдХ:**
- рдбреНрд░рд┐рдк рд╕рд┐рдВрдЪрд╛рдИ рд╕реЗ 40% рдкрд╛рдиреА рдмрдЪрд╛рдПрдВ
- рдореМрд╕рдо рдРрдкреНрд╕ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ

ЁЯУЮ **рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди:** 1800-180-1551"""

@app.route('/api/analyze-crop', methods=['POST'])
def analyze_crop():
    try:
        data = request.get_json()
        image_data = data.get('image')
        
        if not image_data:
            return jsonify({"success": False, "error": "No image provided"}), 400
        
        print("ЁЯФН Analyzing crop image...")
        analysis_result = analyze_crop_with_opencv(image_data)
        
        return jsonify({
            "success": True,
            "disease": analysis_result["disease"],
            "confidence": analysis_result["confidence"],
            "treatment": analysis_result["treatment"],
            "treatment_hindi": analysis_result["treatment_hindi"]
        })
        
    except Exception as e:
        print(f"Crop analysis error: {e}")
        return jsonify({
            "success": False,
            "error": "Analysis failed"
        }), 200

def analyze_crop_with_opencv(image_data):
    """Basic computer vision analysis"""
    try:
        if ',' in image_data:
            image_data = image_data.split(',')[1]
        
        image_bytes = base64.b64decode(image_data)
        nparr = np.frombuffer(image_bytes, np.uint8)
        opencv_image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        if opencv_image is None:
            raise ValueError("Invalid image")
        
        # Simple analysis
        return {
            "disease": "рд╕реНрд╡рд╕реНрде рдлрд╕рд▓ / Healthy Crop",
            "confidence": 0.85,
            "treatment": "рдлрд╕рд▓ рдЕрдЪреНрдЫреА рджрд┐рдЦ рд░рд╣реА рд╣реИред рд╡рд░реНрддрдорд╛рди рджреЗрдЦрднрд╛рд▓ рдЬрд╛рд░реА рд░рдЦреЗрдВред",
            "treatment_hindi": "Crop looks healthy. Continue current care routine."
        }
        
    except Exception as e:
        return {
            "disease": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рддреНрд░реБрдЯрд┐ / Analysis Error",
            "confidence": 0.0,
            "treatment": "рдХреГрдкрдпрд╛ рд╕реНрдкрд╖реНрдЯ рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред",
            "treatment_hindi": "Please upload clear image."
        }

if __name__ == '__main__':
    print("=" * 60)
    print("ЁЯМ▒ KISAN MITRA - GEMINI AI AGRICULTURAL ASSISTANT")
    print("=" * 60)
    print("ЁЯдЦ AI Backend: Google Gemini + Enhanced Local AI")
    print("ЁЯОп Real AI responses activated with Gemini!")
    print("ЁЯЧгя╕П Voice input with Hindi text output ready")
    print("ЁЯТм Chat interface fully functional")
    print("ЁЯУК Computer vision analysis enabled")
    print("ЁЯФН Debug mode: Enhanced logging enabled")
    print("=" * 60)
    
    app.run(debug=True, port=5000, host='0.0.0.0')
